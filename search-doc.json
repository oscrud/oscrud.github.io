[{"title":"Configuration","type":0,"sectionRef":"#","url":"docs/configuration","content":"Configuration is using json formatted file and based on .oscrud.json named file. Copy { \"watcher\":\".\",// Directory for hot reload watch changes \"port\":\"12345\",// Port for server \"env\":{// Environment Variables \"SOME_ENV\":\"SOME_VALUE\" }, \"clients\":{// For generate client currently only support \"go\" \"go\":{ \"name\":\"example\", \"directory\":\"client\" } } }","keywords":"documentation oscrud config example"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/getting-start","content":"If you doesn't have Go installed on your pc. You can get it here. After installed Go on your pc, you can install CLI and go module with command below. Copy $ go get -u github.com/oscrud/core $ go install github.com/oscrud/core/oscrud After complete installation, you can Go with a simple scaffold. Once cloned you can start your application in development mode with simple oscrud dev. Copy package main import( oscrud \"github.com/oscrud/core\" ) funcmain(){ oscrud := oscrud.NewOscrud() oscrud.Register(new(Service)) oscrud.UseDevServer(\"some_secret_password\") oscrud.Start() }","keywords":"documentation oscrud getting start example"},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/handler/overview","content":"Handler is a function like func (Context, struct) (struct, error) to accept and process requests. Since internally we're using reflection to map incoming request to specified handler, so we standardize handler for it.","keywords":"documentation oscrud handler example"},{"title":"Example","type":0,"sectionRef":"#","url":"docs/handler/example","content":"All request and response is define by developer, so we suggest to have 1 handler 1 file structure so can view like a documentation. This structure have show at scaffold. Copy package main import( \"context\" \"errors\" \"github.com/oscrud/scaffold/model\" ) // ExampleRequest : type ExampleRequest struct{ Name string`json:\"name\"` Error bool`json:\"error\"` } // ExampleResponse : type ExampleResponse struct{ Result model.User `json:\"result\"` } // Errors : var( ExampleErrorRequest = errors.New(\"example of error retusrns\") ) // Example : func(srv ExampleService)Example(ctx context.Context, req *ExampleRequest)(*ExampleResponse,error){ if req.Error { returnnil, ExampleErrorRequest } response :=new(ExampleResponse) response.Result = model.User{Name: req.Name} return response,nil }","keywords":"documentation oscrud handler example"},{"title":"Middleware","type":0,"sectionRef":"#","url":"docs/middleware","content":"oscrud.Middleware is for process pre-request and post-request. So for exmaple middleware must implement with following interface. Inside function receiving service and handler's name and request, response as go struct so you can run with json.Marhsal or any other marshal method since struct tag will be implement too when generating code. Copy // MiddlewareContext : type MiddlewareContext struct{ } // PreRequest : func(mc MiddlewareContext)PreRequest(ctx context.Context, service string, request interface{}) context.Context { return ctx } // PostRequest : func(mc MiddlewareContext)PostRequest(ctx context.Context, service string, response interface{}, err error) context.Context { return ctx }","keywords":"documentation oscrud middleware example"},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/introduction","content":"Oscrud# Oscrud is a grpc + json framework. The purpose of this framework is let developer can easily development microservice architecture applications. This framework included built-in CLI and tools for enhance development experience. Currently framework is still under development, any suggestion or PR is welcome. Since we're still new, any suggestion and pull requests are welcomed. Currently we haven't setup any social for disscussion will be update later. Any discussion should follow template by providing a clearer information for everyone. PR & Suggestion# CasesExample Solving Issues Issues# Simple exampleWay to reproduce issuesIssues aboutVersion","keywords":"documentation oscrud introduction"},{"title":"Errors List","type":0,"sectionRef":"#","url":"docs/reference/errors","content":"Command Line# Error\tDescriptionED0001\t.oscrud.json doesn't found in current directory ED0002\tinvalid json format in config file ED0003\tcommand execution have errors occurs ED0004\tcommand error while waiting process ED0005\tfail to start windows process ED0006\tFile watcher having error when initialize Core Server# Error\tDescriptionED0001\tfailed to dial %v ED0002\tfailed to listen %v ED0003\tinvalid arguments at %v, it must be 'func(context.Context, interface{}) (interface{}, error)' ED0004\tinvalid first arguments at %v, first arugments must be context.Context ED0005\tinvalid second arguments at %v, second arguments must be error ED0006\tmissing mode arguments ED0007\tfail to read body, %v ED0008\tinvalid json request, %v ED0009\tinvalid password for devserver ED0010\tfail to find registry function ED0011\tfail to marshal request, %v ED0012\tfail to unmarshal request to source, %v ED0013\tfail to marshal response, %v ED0014\tfail to unmarshal response to source, %v","keywords":"documentation oscrud errors example"},{"title":"Initialize Server","type":0,"sectionRef":"#","url":"docs/server/intialize_server","content":"For example you can clone scaffold or start with below code. Mainly must have these code to run with oscrud-cli. Copy package main import( oscrud \"github.com/oscrud/core\" \"github.com/oscrud/scaffold/service\" ) funcmain(){ oscrud := oscrud.NewOscrud() oscrud.Register(new(service.ExampleService)) oscrud.UseDevServer(\"some_secret_password\") oscrud.Start() }","keywords":"documentation oscrud initialize example"},{"title":"Server Metadata","type":0,"sectionRef":"#","url":"docs/server/metadata","content":"Metadata is like state but is for single request, so won't have value in another request. Method\tDescriptionInjectContext(context.Context, string, string) Context\tInject metadata with specified key to context DeflateContext(context.Context, string) string\tDeflate metadata by key from context InjectMetadata(context.Context, map[string]string) Context\tInject metadata to context DeflateMetadata(context.Context) map[string]string\tDeflate metadata from context Copy package main import( \"context\" \"errors\" oscrud \"github.com/oscrud/core\" ) // ExampleRequest : type ExampleRequest struct{} // ExampleResponse : type ExampleResponse struct{} // Example : func(srv ExampleService)Example(ctx context.Context, req *ExampleRequest)(*ExampleResponse,error){ ctx = oscrud.InjectContext(ctx,\"key\",\"value\") value := oscrud.DeflateContext(ctx,\"key\")// value value2 := oscrud.DeflateContext(ctx,\"key2\")// nil ctx = oscrud.InjectMetadata(ctx,map[string]string{\"key\":\"value\"}) value3 := oscrud.DeflateMetadata(ctx,\"key\")// {\"key\":\"value\"} }","keywords":"documentation oscrud server metadata example"},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/server/overview","content":"oscrud.Server is the core struct of the framework, inside server core you can have intialize method for ( middleware, development server, and more )","keywords":"documentation oscrud server example"},{"title":"Server Options","type":0,"sectionRef":"#","url":"docs/server/register","content":"Metadata is like state but is for single request, so won't have value in another request. Method\tDescriptionUseMiddleware(Middleware)\tRegister middleware UseBanner(bool)\tDisable or enable banner ( enabled by default) UseRecover(func(interface{}))\tRecover handler UseDevServer(string)\tStart with development server to work with tools","keywords":"documentation oscrud server options example"},{"title":"Server State","type":0,"sectionRef":"#","url":"docs/server/state","content":"Get & Set application level state, you will have it when u have the server instance. Method\tDescriptionSetState(string, interface{})\tSet value by key to server state GetState(string) interface{}\tGet value by key from server state Copy package main import( oscrud \"github.com/oscrud/core\" ) funcmain(){ server := oscrud.NewOscrud() server.SetState(\"state_key\",\"some_str\") log.Println(server.GetState(\"state_key\"))// some_str log.Println(server.GetState(\"state\"))// nil }","keywords":"documentation oscrud server state example"},{"title":"Command Line","type":0,"sectionRef":"#","url":"docs/tools/command-line","content":"Installation# Copy $ go install github.com/oscrud/core/oscrud After installation succes, you can run oscrud it will display as below. Copy [OSCRUD] (INFO) | ┌─┐┌─┐┌─┐┬─┐┬ ┬┌┬┐ [OSCRUD] (INFO) | │ │└─┐│ ├┬┘│ │ ││ [OSCRUD] (INFO) | └─┘└─┘└─┘┴└─└─┘─┴┘ [OSCRUD] (INFO) |———————————————————— Oscrud CLI ————————————————————————| [OSCRUD] (INFO) | > oscrud help | Print oscrud basic commands | [OSCRUD] (INFO) | > oscrud generate | Generate grpc client | [OSCRUD] (INFO) | > oscrud dev | Start app in development mode | [OSCRUD] (INFO) | > oscrud build | Build production binary | [OSCRUD] (INFO) |————————————————————————————————————————————————————————| Help# Help is for show list of commands with simple description. Generate# Generate is for generating client code based on oscrud server code. Dev# Start app in development mode with .oscrud.json configuration. Build# Build production binary file but environment is not injected inside, so u will still need provide environment variables at your app container.","keywords":"oscrud cli"},{"title":"Geliver","type":0,"sectionRef":"#","url":"docs/tools/geliver","content":"Frontend UI Tool for connection oscrud application, and come with some features. Web\tVSCode Extension Installation# Typed Endpoints# All endpoints will automatically imports when selected oscrud server. You can reload to update if u adding new endpoints to the server. Request and Response History# Every sent request and with response, will be record down at history, when u click it will show the request, response for you. Collection and Preset# You can create your own collection and preset, it's just like a folder contains many file. so everytime u need for some shortcut just click and will having the request that u set in preset. Theme# App and Editor theme is customizable in setting tab, sometimes may not work so suggest to refresh after selected. Geliver Data Export and Import ( only Web )# History, Collection and Preset is exportable to prevent data loss when changing device or format as backup purpose.","keywords":"oscrud geliver vscode web"}]